# AppVeyor file
# based on the official example https://www.appveyor.com/docs/appveyor-yml/

#---------------------------------#
#      general configuration      #
#---------------------------------#

# Build version format
# you can use {branch} name in version format too
version: 1.0.{build}-{branch}

# branches to build
branches:
  # whitelist
  #only:
  #  - master
  #  - production

  # blacklist
  except:
    - gh-pages

# Do not build on tags (GitHub and BitBucket)
#skip_tags: true

# Skipping commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
skip_commits:
  files:
     - .circleci/*
     - travisci/*
     - .travis.yml

# Including commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#only_commits:
#  files:
#    - Project-A/
#    - Project-B/

# Do not build feature branch with open Pull Requests
#skip_branch_with_pr: true

# Maximum number of concurrent jobs for the project
#max_jobs: 1

#---------------------------------#
#    environment configuration    #
#---------------------------------#


# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input
  # used to access with Windows Remote Desktop
#  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


# fetch repository as zip archive
#shallow_clone: true  # default is false

# set clone depth
clone_depth: 5                      # clone entire repository history if not defined

# environment variables
environment:
  matrix:
    - nodejs_version: "7"
  NODE_ENV: test
  CI: yes
  APPVEYOR: yes

  MONGO_BINS: "C:\\mongodb\\bin" # only for Appveyor!

  # -----------------------------------------
  # Only for server side
  MONGODB_URI: mongodb://localhost/KS
  MONGODB_TESTING_URI: mongodb://localhost/test-db
  JWT_SECRET: faketestjwt
  TWITTER_CONSUMER_KEY: 2biuKg4D32kvUn1Mfc8R8y1s5
  TWITTER_CALLBACK_URL: http://127.0.0.1:3000/api/auth/twitter/callback
  TWITTER_PROFILE_URL: "https://api.twitter.com/1.1/account/verify_credentials.json?include_email: true"
  FACEBOOK_APP_ID: 1551851841772033
  FACEBOOK_CALLBACK_URL: http://localhost:3000/api/auth/facebook/callback
  GOOGLE_CLIENT_ID: 365623726007-ko2cth83i91nh9dhujgnf14am43gi21b.apps.googleusercontent.com
  GOOGLE_CALLBACK_URL: http://localhost:3000/api/auth/google/callback
  GITHUB_CLIENT_ID: 59d06b2756fca051d517
  GITHUB_CALLBACK_URL: http://localhost:3000/api/auth/github/callback
  LINKEDIN_CLIENT_ID: 77fq49ghqoa7vr
  LINKEDIN_CALLBACK_URL: http://localhost:3000/api/auth/linkedin/callback
  USER_EMAIL: fake@fake.it
  PASS_EMAIL: fakepasswordemail
  RECAPTCHA_PUBLIC: recaptchapublic
  RECAPTCHA_SECRET: recaptchasecret
  # encrypted oauth secret keys
  GOOGLE_CLIENT_SECRET:
    secure: XLfh8kRq6E5nZN6lggCn6R/ugEcHwzSMjs7sUuZnJgMrq7vBCZhzGX6wJ0HB4No/GsbuRiWkp3FyIzhJc8b2XNUqFFqWnKnwnzT5rcrjoXGnoUapSqkFV1ditmr+bFop1KP7PtuVdkMt9CwPaLkRby3wmfkgH6GGQBDFiWOqfhrjUV3D54V1x+cgC7J8Gg5oWoJwAP4pgvSm+JjFi7hgXndgx3b22avD/LPWcMiLCvmbt4ciSKcicQm50fAvBTGKcTESkhKR2LKZIOlc6rFtF/N4x910WA1P5Hj+zKJDOY/NvdtRdftSD36pjOm6XrDyINh6yoTpoHscFMPUG3DmpHngaisRAgHoIgBIXwf6/AhWLJoyltUFtlHbQ822xC11Q3wTgSGIYccOHlvYOy7t6JOOmJbTGwZJHgWMokmbzmv3FN4uPjm3ZwtAc51vp6AVAo9TbEOYoioVkI8x9GKFefXYNFfPTFiVLD3UCvJWFF5Y3A/MTZdq+ZJsAKQkGcm49CNTC31JLfM94ZDPQjVIIiW0TXIBlnIzwUSVamH8OS/NjBV4UQKmiUP4ovQgmkfinC1UkceKjCg1nzx/JUTaQo1wepy+nP4i4JwfBIRPpPeXKBd47den8ijaLG4Im6es7ZBvnbaUMjMB8HO2ZSVINa21medcYj1GmyottQKLrwM=
  FACEBOOK_APP_SECRET:
    secure: Jd2GZo3iCbylESMIwgLSfq+oCtsolbazfkCAsUmjtIVVzHjizl4k9sfHDOFR9TbjKaxuelwokCIStDvnKHVVSVLSZapvGlwgy3iWX4jsVcKi7hWgrB/v1v/Fw680n0dH0BxXNacrkREVnwqQpgkRSMPoG/lsHkz1mPauNczidzGzMWxTANypyjYzx9Rg5wk2MqRMmOleIt3G7bwWsLFpXTns0CtNo/gglCz4BVFws/CnYtQZ+lb3pssmVyhdQnfObQxkoLOebMElTZkcyTJBoto843QGJvJGwjJ1V8494JDnnPmyFUtLpd0ueyhB/clQZY5ZiouulOVCUYIf7Qjwldq/x2eiZyxqHsTVptMFOvWW4PyW5ZhpUbA0fEck7Q4aBry33VozNkRvglifnFExB2uiBcx/LNAJNY+E7/tRHWKH01DtRrozMBOxlbCWoI5w4CUNoknhnQkGCkG0IokPZQC9AZLeJUSleCuEnzBUyTK3YGsGqjYHA7BKqiVO9o+4x6+TBGN8OyNpBXvlRkxZXfW/4nQwMe1218mYjv6JTztN9lVozDmyfQcSNCzf+pp2qldkYw1/YC7nl8vWQPOLj32l9dHdsQxDJek7elNOv/a/GjEaj03ItgjZzykQ46NZE19a6yXZCRVBgLaCuk4o8CWx6gyoogCuCDTG75emDdk=
  GITHUB_CLIENT_SECRET:
    secure: BVDW1m9Didg56Cp+kigZLCisLGPBBWEm4P7Goq2j5iz/b6C/2YVM+CJVetMOgjYxY66bifXzUR6gcr4DYTLWRtP3C2fnBZXphJXFjI3R04uxSCdukh7Uc0zqDfPvXzlXh40QD3647AuUCYZmgePe2mjrd4gHbE2VGyOTa/ZMizxrJPnCKhtz6AhMaZHHSX5Pjv2GRvoXa3bLs9EtSYditJHlkIwb7MqTL54snIRmCvLXwVl2LGc9SmTMfEnYUSgWn7dbbvUi8dCW05RPQaebRutEQ9Nr616wnOOYWX4tHjq7hYO0PZCUwo8t6ZpKv5r2dXB1v5ziX1toIfiUA2qLKMFYM1Gl3Tyy1jkspRW0bq7jL/DjPElcjntpfSD6Jnmg2BlYjZdVnfw5BhWhaqz7/QByVwHh91xoqwEqQjgHBxmVE3G6gQcTJyei9Ja958Kl6VMwP/aGQu+lQemSiGq2uCNsTQfYlOUOsFCVrC+RrRj2vHRfqq3hkQdGmv1xIuF/6xmtt2xUMLujSjHocNBLxkMsTq6H6AUqLdM4flv2JdXrXK/c4hkpEOLLWwhGyjroRtYUV9RBfvL3/HDFhLdtfeCvbyO1P+RSmHT2Xilamay09swe1Z9D02GcrSS8PMxT0rRKltVLR0AKGFLkLxd6ERu/ViXydgOVsd2e1wLhDk0=
  TWITTER_CONSUMER_SECRET:
    secure: a4l2JHHaKYeGJf+koV3D9R0YII8+MtT5cv9Tjjq1liANg2/8RNJlLCTGw/C6mwZnWw0rnC0Xqb7Qsq5RN3P1ezf6MqdQO/waROpZdD8vLUQbMi528qu9s1OZIBg4HIBWGvnD6W8OqUW9AjUPf+bzXwwojRvNgOdxHF1WvC807cWo1iW3/pbQP+U5sGMAsm0vNPzQXrVgPcCRA83UZ/yXl8GMSsppoX8/Y8rxz6IoJbWmkNO0cOc4t+1zGesPJVd7n/SpVZi9qKn+Ky2ZvoCITceA3JYOp2qZTX//m0DJWOf+aPHi4nxTlxnvdgZWjX0VF2FddUNEJOX7Ztw7p2vqsxJD9pcobrISyOe2/kbIAinRwMO5scsCoI/Vxw6iuy604pvkbMO6Hf6FTStoqHUMDUt1nkO2gMHfkbYTMuEMER/OX5hSan98Nwo5sQPf49W0ct6tA9HpRW9EcawqCW+zEZK47ZNZ5AjvlTYDyWDzkgFOpPdz45KnywILa14utfmTIhfBz6GuuFfnmc+VAbaDM0EZTZAhduOlptwMUIciBB3PEFwh/0g3WzYLdqeY0B3Qu0XZS0ML/5+yNWOwvPDeS6OxN24WjQpOD4X+Wmsj0AM7Qod3rD09efPG2kuOwe8Vck66DT/dbjCg054rwHZeKHCEyh11SfOYek9L7A867j4=
  LINKEDIN_CLIENT_SECRET:
    secure: XQFOEJWQV9iX6SMUMdx1wK6N1RESs5ksAd0ae0zffb+yFlANwVhBAwo4jvSh0SlOEozgW31pqN6rbA6qKQf44NSk/EgLtq/CYuJqvYoOg1R8YovmTNyHIydGYgixQbyKGRmAZ3dZSnqknFSsNEfPRRR/C1KLYFV+hvqUAijdh6CrvevnLvYJeLJhhZLUZSws6Z/jxoW5/35CHH5HuTWfNH20zKDyM4QWSoQr/iOQutZa5UuCe1IUqVUP6jqRdPgFxSXT4UHsyBzieeQhof+NgmuW0zAXmei5r97mloMnfo1NEiGoZ3W7Df+Ngd2Q+/4PyfLK3iBH/gQwMRxBRa1QgYUhoPtw9YTNE/AKmtb5mELPevQgqNH1DoSCghoK638uBU3X4LYR+3i0XVK4iPRBjN8ktPcns9jc03QxtKPdU4Cx+JEmf/aU+cCYxYhoZ2AqZ1TLVAP2lJJPtE555lLGdTLOy4B+uU19G82ofJ29Tk1Yc/Kw0q4I0Dmt91u7CxQNBq24wR596VrontUhSMh2T+lZAHpXfeaWJLcBMZrYcYCr3BCWkzUyW4xwLft0mNv+abafE0N4exXuTbm1qeUx0hvlpo+i4E/LUeP9xGYBRR2DtIZFSgophFHL4LzaQg4cHXwDNSqI7A6KhUh7341/Oz/EFhrCUGF/bEZ4MTN7dcw=
  # -----------------------------------------

  # -----------------------------------------
  # Only for client side used by e2e tests.
  # e2e login 3dparty services encrypted variables
  GITHUB_USER_E2E:
    secure: ihh/L2oIgPV44m62RqHyUg==
  GITHUB_PWD_E2E:
    secure: ho+DXyA9uvK4Z0CzaJAI2w==
  GOOGLE_USER_E2E:
    secure: O23NnzEBu9MGRUXb2/qrgpR7YQHYYx8s3c24VNuexnc=
  GOOGLE_PWD_E2E:
    secure: ho+DXyA9uvK4Z0CzaJAI2w==
  FACEBOOK_USER_E2E:
    secure: 8FGb6US+rj1BqXSvjchvdiz7xDwGwl8eWxCvjQW9wDU=
  FACEBOOK_PWD_E2E:
    secure: ho+DXyA9uvK4Z0CzaJAI2w==
  # -----------------------------------------

  CODECLIMATE_REPO_TOKEN:
    secure: byRx0agrhNKcx2rY//XQ+BMDxO2nncnZGp0zpSCyYtl/59o6giXxdgxWkbHMTvfLiwazQqb8z7w97uqUy/gKAWhdp5pU5ioswTxKF6beR0o=
  COVERALLS_REPO_TOKEN:
    secure: Rq8TOMtxRLCrtZqN5mZ6eAeGO1Y7ZCN0k1I7Dy314tv+ttGMeHEnRNsK9XNXj4JJ


# this is how to allow failing jobs in the matrix
matrix:
  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.

# build cache to preserve files/folders between builds
cache: node_modules -> package.json

# enable service required for build/tests
services:
  - mongodb

# scripts that run after cloning repository
install:
  # by default, all script lines are interpreted as batch
  - echo Start install
  # to run script as a PowerShell command prepend it with ps:
  - ps: Write-Host 'Start install in PowerShell'
  # batch commands start from cmd:
  - cmd: echo Start install in cmd
  # install redis-server for windows
  - nuget install redis-64 -excludeversion
  - redis-64\tools\redis-server.exe --service-install
  - redis-64\tools\redis-server.exe --service-start
  # install nodejs and dependencies both global and local
  # use appveyor-retry to retry if npm install fails
  - cmd: appveyor-retry powershell Install-Product node $env:nodejs_version
  - npm install -g npm@5.3
  - set PATH=%APPDATA%\npm;%PATH%
  - npm install -g codeclimate-test-reporter
#  - npm install -g pm2
  - npm install -g forever # On AppVeyor I'm not able to use pm2 (why??) so I switched to forever
  - npm install
  - echo Cloning server
  - git clone https://github.com/Ks89/My-MEAN-website-server.git ../My-MEAN-website-server
  - cd ../My-MEAN-website-server
  - npm install
  - set FRONT_END_PATH=../my-mean-website-client/dist
  - echo FRONT_END_PATH is %FRONT_END_PATH%
  - npm run e2e:forever:start # similar to npm run prod:start but with forever instead of pm2
  - cd ../my-mean-website-client

#---------------------------------#
#       build configuration       #
#---------------------------------#
# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform:
  - x86
  - x64

build: off

# scripts to run before build
before_build:

# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
before_package:

# scripts to run after build
after_build:

# to run your custom scripts instead of automatic MSBuild
build_script:
  # Output useful info for debugging.
  - node --version && npm --version
  - ps: "npm --version # PowerShell" # Pass comment to PS for easier debugging
  - # run debug build
  - echo "npm run debug build on $TRAVIS_OS_NAME"
  - npm run build:dev
  # run production build
  - echo "npm run production build on $TRAVIS_OS_NAME"
  - npm run build:prod
  # run production + AOT build
  - npm run clean
  - echo "npm run production + AOT build on $TRAVIS_OS_NAME"
  - npm run build:prod:aot

#---------------------------------#
#       tests configuration       #
#---------------------------------#

# scripts to run before tests
before_test:

# scripts to run after tests
after_test:

test_script:
  # Output useful info for debugging.
  - node --version && npm --version
  - ps: "npm --version # PowerShell" # Pass comment to PS for easier debugging
  # run tests
  - npm test
  # add mongo bins (like mongo and mongorestore) to path
  - ps: $env:path = "$env:MONGO_BINS;$env:path"
  # drop db collection and fill it with data
  - npm run init-db
  - npm run build:prod:aot #again because it is used by e2e testing
  # update webdriver + run e2e tests
  - npm run webdriver:update:ci
  - npm run e2e:ci

#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

#artifacts:

#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
#deploy:

# scripts to run before deployment
before_deploy:

# scripts to run after deployment
after_deploy:

# to run your custom scripts instead of provider deployments
deploy_script:

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
on_success:
  - npm run docs
  - npm run compodoc
  - codeclimate-test-reporter < coverage/lcov.info
  - node .\node_modules\coveralls\bin\coveralls.js < .\coverage\lcov.info

# on build failure
#on_failure:
  # - do something

# after build failure or success
on_finish:
   - echo Stopping server
   - cd ../My-MEAN-website-server
   - npm run e2e:forever:stop # similar to npm run prod:start but with forever instead of pm2

#---------------------------------#
#         notifications           #
#---------------------------------#

#notifications:
# # Slack
#  - provider: Slack
#    incoming_webhook: http://incoming-webhook-url
#
#  # ...or using auth token
#
#  - provider: Slack
#    auth_token:
#      secure: kBl9BlxvRMr9liHmnBs14A==
#    channel: development
#    template: "{message}, {commitId}, ..."